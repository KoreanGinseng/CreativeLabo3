#pragma once
#include "SocketDefine.h"

// ********************************************************************************
/// <summary>
/// ソケット通信用インターフェース
/// </summary>
// ********************************************************************************
class CMySocket
{
protected:

    SOCKET      m_Socket;                               //! ソケット
    SOCKETERROR m_Error{ SOCKETERROR::ERROR_NONE };     //! ソケットエラー
    int         m_PortNo;                               //! ポート番号
    bool        m_bStart;                               //! 開始フラグ
    SOCKET      m_tSocket;
    int         m_Id;

public:

    // ********************************************************************************
    /// <summary>
    /// 
    /// </summary>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    static void StartUp(void);

    // ********************************************************************************
    /// <summary>
    /// 
    /// </summary>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    static void CleanUp(void);

    // ********************************************************************************
    /// <summary>
    /// コンストラクタ
    /// </summary>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    CMySocket(void);
    
    // ********************************************************************************
    /// <summary>
    /// デストラクタ
    /// </summary>
    /// <created>いのうえ,2021/02/16</created>
    /// <changed>いのうえ,2021/02/16</changed>
    // ********************************************************************************
    virtual ~CMySocket(void);

    // ********************************************************************************
    /// <summary>
    /// WSA初期化
    /// </summary>
    /// <created>いのうえ,2021/02/16</created>
    /// <changed>いのうえ,2021/02/16</changed>
    // ********************************************************************************
    virtual void Init(void);

    // ********************************************************************************
    /// <summary>
    /// 開始
    /// </summary>
    /// <created>いのうえ,2021/02/16</created>
    /// <changed>いのうえ,2021/02/16</changed>
    // ********************************************************************************
    virtual void Start(void);

    // ********************************************************************************
    /// <summary>
    /// アクセプト
    /// </summary>
    /// <returns>ソケットゥ</returns>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    virtual SOCKET* Accept(void);

    // ********************************************************************************
    /// <summary>
    /// ソケットの作成
    /// </summary>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    virtual void Create(void);

    // ********************************************************************************
    /// <summary>
    /// ソケットをバインド
    /// </summary>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    virtual void Bind(void);

    // ********************************************************************************
    /// <summary>
    /// ソケットの接続
    /// </summary>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    virtual void Connect(const std::string& ip);

    // ********************************************************************************
    /// <summary>
    /// 接続待機状態にする
    /// </summary>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    virtual void Listen(void);

    // ********************************************************************************
    /// <summary>
    /// ソケットを閉じる
    /// </summary>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    inline void CloseSocket(void)
    {
        closesocket(m_Socket);
    }

    // ********************************************************************************
    /// <summary>
    /// IDの設定
    /// </summary>
    /// <param name="id">id</param>
    /// <created>いのうえ,2021/02/18</created>
    /// <changed>いのうえ,2021/02/18</changed>
    // ********************************************************************************
    inline void SetId(int id)
    {
        m_Id = id;
    }

    // ********************************************************************************
    /// <summary>
    /// IDの取得
    /// </summary>
    /// <returns>id</returns>
    /// <created>いのうえ,2021/02/18</created>
    /// <changed>いのうえ,2021/02/18</changed>
    // ********************************************************************************
    inline int GetId(void) const
    {
        return m_Id;
    }

    // ********************************************************************************
    /// <summary>
    /// ソケットの取得
    /// </summary>
    /// <returns>ソケット</returns>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    inline const SOCKET& GetSocket(void) const
    {
        return m_Socket;
    }

    // ********************************************************************************
    /// <summary>
    /// ポート番号の設定
    /// </summary>
    /// <param name="portNo">ポート番号</param>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    inline void SetPortNo(int portNo) noexcept
    {
        m_PortNo = portNo;
    }

    // ********************************************************************************
    /// <summary>
    /// ポート番号の取得
    /// </summary>
    /// <returns>ポート番号</returns>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    inline int GetPortNo(void) const noexcept
    {
        return m_PortNo;
    }

    // ********************************************************************************
    /// <summary>
    /// 開始フラグの取得
    /// </summary>
    /// <returns>true : 動作中, false : 動作前</returns>
    /// <created>いのうえ,2021/02/16</created>
    /// <changed>いのうえ,2021/02/16</changed>
    // ********************************************************************************
    inline const bool IsStart(void) const noexcept
    {
        return m_bStart;
    }

	// ********************************************************************************
	/// <summary>
	/// 送信
	/// </summary>
	/// <param name="pData">送信データ</param>
	/// <param name="datalen">送信データサイズ</param>
	/// <returns>送信データサイズ</returns>
	/// <created>いのうえ,2021/02/16</created>
	/// <changed>いのうえ,2021/02/18</changed>
	// ********************************************************************************
	inline int Send(const void* pData, int datalen)
    {
        return send(m_Socket, reinterpret_cast<const char*>(pData), datalen, 0);
    }

	// ********************************************************************************
	/// <summary>
	/// 受信
	/// </summary>
	/// <param name="outData">書き出しデータ先</param>
	/// <returns>受信データサイズ</returns>
	/// <created>いのうえ,2021/02/16</created>
	/// <changed>いのうえ,2021/02/17</changed>
	// ********************************************************************************
	template< class T >
	inline int Recieve(T& outData) const
	{
		T Data;
        int size = recv(m_Socket, (char*)&Data, sizeof(T), 0);
        outData  = Data;
		return size;
	}

    // ********************************************************************************
    /// <summary>
    /// 受信
    /// </summary>
	/// <param name="outData">書き出しデータ先</param>
    /// <param name="datalen">受信データサイズ</param>
	/// <returns>受信データサイズ</returns>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    inline int Recieve(char* outData, int datalen) const
    {
        int size = recv(m_Socket, outData, datalen, 0);
        return size;
    }

    // ********************************************************************************
    /// <summary>
    /// 
    /// </summary>
    /// <param name="socket"></param>
    /// <created>いのうえ,2021/02/18</created>
    /// <changed>いのうえ,2021/02/18</changed>
    // ********************************************************************************
    inline void SetSocket(SOCKET* socket) noexcept
    {
        m_Socket = *socket;
    }

    // ********************************************************************************
    /// <summary>
    /// operator()
    /// </summary>
    /// <returns>true : 正常, false : 異常</returns>
    /// <created>いのうえ,2021/02/16</created>
    /// <changed>いのうえ,2021/02/16</changed>
    // ********************************************************************************
    inline const bool operator()(void) const noexcept
    {
        return (m_Error == SOCKETERROR::ERROR_NONE);
    }

    // ********************************************************************************
    /// <summary>
    /// ソケットとして取得
    /// </summary>
    /// <returns>ソケット</returns>
    /// <created>いのうえ,2021/02/17</created>
    /// <changed>いのうえ,2021/02/17</changed>
    // ********************************************************************************
    operator const SOCKET& (void) const noexcept
    {
        return m_Socket;
    }

    // ********************************************************************************
    /// <summary>
    /// エラーの取得
    /// </summary>
    /// <returns>SOCKETERROR</returns>
    /// <created>いのうえ,2021/02/16</created>
    /// <changed>いのうえ,2021/02/16</changed>
    // ********************************************************************************
    inline const SOCKETERROR GetError(void) const noexcept
    {
        return m_Error;
    }
};